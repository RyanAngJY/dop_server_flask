version: "3"

services:
    db:
        image: "mysql" # use latest official MySQL version
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: test_db
        volumes:
            - mysql-data:/var/lib/mysql # persist data even if container shuts down

    zookeeper:
        image: wurstmeister/zookeeper
        # logging:
        #     driver: none # remove logging

    kafka:
        image: wurstmeister/kafka
        ports:
            - "9092:9092"
        environment:
            KAFKA_ADVERTISED_HOST_NAME: kafka
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_CREATE_TOPICS: "testtopic:3:1"
        # logging:
        #     driver: none # remove logging

    backend:
        build:
            context: .
            dockerfile: Dockerfile.local
        environment:
            - LOCALHOST=docker.for.mac.localhost
            - GRPC_HOST=docker.for.mac.localhost
            - KAFKA_HOST=kafka # this references the KAFKA_ADVERTISED_HOST_NAME
            - MYSQL_HOST=db # this is the service name in docker compose
            - MYSQL_USER=root
            - MYSQL_PASSWORD=root
            - MYSQL_DATABASE=test_db
        ports:
            - "8000:8000"
        volumes:
            - .:/app # mount the current dir to /app dir in the container (so that when any changes made locally will be reflected in the container)
        restart: always # this is so that it will keep restarting until it manages to connect with Kafka (this is because the "depends_on" does not necessarily mean the Kafka is actually ready to be connected after it is run)
        depends_on:
            - db
            - kafka

    consumer:
        build:
            context: .
            dockerfile: Dockerfile.consumer
        volumes:
            - .:/app # mount the current dir to /app dir in the container (so that when any changes made locally will be reflected in the container)
        restart: always # this is so that it will keep restarting until it manages to connect with Kafka (this is because the "depends_on" does not necessarily mean the Kafka is actually ready to be connected after it is run)

volumes:
    mysql-data: # named volumes can be managed easier using docker-compose
